
# XSTR

## Synopsis

Efficient binary strings with "value" semantics and statically provable memory
management.

## Description

The object of this module is to minimize the number of cases where it's
necessary to copy a string while retaining "pass by value" semantics.

This being C, we don't have automatic constructors & destructors, but the
usage is defined in a way that's simple to prove statically, and it's
intentionally awkward to pass an untracked string between functions.

## Mechanisms

This module uses Rust's notion of loan+borrow vs give+take to control who owns
a given string. Essentially the idea is to avoid copying strings when the it's
agreed as a transfer or a loan, but to make a copy if both want ownership.

If neither wants ownership (caller Gives but receiver Borrows), the receiver
gets ownership anyway. If both want ownership, then a copy is made.

Correctness is ensured by tracking the "owner" of a string who will eventually
be responsible for freeing its allocated memory. Copying is minimized by having
separate mechanisms for:

    Give }
    Loan } pass as a parameter
    Return

    Copy
    Swap

    CS  (C-string) - to pass the base pointer as a parameter to a traditional C function
    CSL (base+length pair) - expand to a comma-separated pair {base, length} so that it's two arguments to a function call

Unless a string variable is used as the return value of a function, it must
always be finalized using Finish.

Functions declare parameter and return types as a proxy type, so that to
(easily) access the contained string one needs to "stick with the program".

Function parameters and return values don't directly pass "string" or
"buffer" objects, but rather proxies that convey (or withhold) ownership;
this makes "take" or "borrow" part of the function prototype.


You should "take" a string if you plan to store it somewhere with a longer
lifetime than the function scope; otherwise you can "borrow" it instead.

The

## Usage

  #include <assert.h> /* ifdef XSTR_DEBUG assert */
  #include <malloc.h> /* malloc, free */
  #include <memory.h> /* memcpy, strlen */
  #include <stdarg.h> /* ifdef XSTR_DEBUG va_start, va_arg, va_end */
  #include <stdint.h> /* SIZE_MAX */
  #include <stdlib.h> /* ifdef XSTR_DEBUG exit */

  #include <malloc.h>
  #include <memory.h>
  #include <stdint.h>
  #include "xstr.h"

  /* passing */
  void Func1( XS string_param ) {
    S string_value = Borrow(string_param);
    printf("Funky %s\n", CS(string_value));
    Finish(string_value);
  }

  void Func2( XS string_param ) {
    S string_value = Take(string_param);
    if (test)
        Func1(Loan(string_value));
    Finish(string_value);
  }

  void Func3(void) {
    S string_value = LS("Hello World");
    if (test)
        Func2(Give(string_value));
    Finish(string_value);
  }

  /* returning */
  XS Func4( XS string_param ) {
    S string_value = Take(string_param);
    Return(string_value);
  }

In addition, if XSTR_DEBUG is defined, also include:

 <stdio.h>
